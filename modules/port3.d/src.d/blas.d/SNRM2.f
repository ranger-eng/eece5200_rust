      REAL FUNCTION SNRM2(N, X, INCX)
      INTEGER N, INCX
      REAL X(INCX, 1)
      INTEGER I1MACH, NMAX, BETA, IEXP, J, EMIN
      INTEGER EMAX, T, MAX0, IOUT
      REAL R1MACH, S2MACH, AX, ABIG, AMED, ASML
      REAL B1, B2, S1, S2, EPS, RELERR
      REAL OVERFL, RBIG, SQRT, FLOAT, ABS, SNGL
      REAL AMIN1, AMAX1
      DOUBLE PRECISION DSML, DMED, DBIG, DX
      DATA B1/0.0/
      DATA B2/0.0/
      DATA S1/0.0/
      DATA S2/0.0/
      DATA RELERR/0.0/
      DATA RBIG/0.0/
      DATA OVERFL/0.0/
      DATA NMAX/0/
C CALCULATE 2-NORM OF ROW 1 OF X ARRAY.
C AVOID ALL OVERFLOWS AND UNDERFLOWS
C I1MACH( 9) = N, THE LARGEST INTEGER
C I1MACH(10) = BETA, THE BASE FOR FLOATING-POINT NUMBERS
C I1MACH(11) = T, THE NUMBER OF BASE-BETA DIGITS IN THE MANTISSA
C I1MACH(12) = EMIN, THE MINIMUM EXPONENT
C I1MACH(13) = EMAX, THE MAXIMUM EXPONENT
C R1MACH( 2) = R, THE LARGEST FLOATING-POINT NUMBER
C EXTERNAL FUNCTION
C EXTERNAL FUNCTIONS
      IF (N .NE. 0) GOTO 1
         SNRM2 = 0.
         RETURN
C/6S
   1  IF (N .LT. 0) CALL SETERR(17H SNRM2 - N .LT. 0, 17, 1, 2)
      IF (INCX .LE. 0) CALL SETERR(20H SNRM2 - INCX .LE. 0, 20, 2, 2)
C/7S
C  1  IF (N .LT. 0) CALL SETERR(' SNRM2 - N .LT. 0', 17, 1, 2)
C     IF (INCX .LE. 0) CALL SETERR(' SNRM2 - INCX .LE. 0', 20, 2, 2)
C/
      IF (NMAX .GT. 0) GOTO 4
         NMAX = I1MACH(9)
C FIRST-TIME SWITCH
         BETA = I1MACH(10)
         T = I1MACH(11)
         EMIN = I1MACH(12)
         EMAX = I1MACH(13)
         IEXP = -((1-EMIN)/2)
C LOWER BOUNDARY OF MIDRANGE
         B1 = S2MACH(1.0, BETA, IEXP)
         IEXP = (EMAX+1-T)/2
C UPPER BOUNDARY OF MIDRANGE
         B2 = S2MACH(1.0, BETA, IEXP)
         IEXP = -((2-EMIN)/2)
C SCALING FACTOR FOR LOWER RANGE
         S1 = S2MACH(1.0, BETA, IEXP)
         IEXP = (EMAX+T)/2
C SCALING FACTOR FOR UPPER RANGE
         S2 = S2MACH(1.0, BETA, IEXP)
         RBIG = R1MACH(2)
         OVERFL = RBIG/S2
         EPS = S2MACH(1.0, BETA, 1-T)
         RELERR = SQRT(EPS)
         ABIG = 1.0/EPS-1.0
         IF (FLOAT(NMAX) .GT. ABIG) NMAX = ABIG
         IF (EMIN .LE. 1-2*T .AND. T+1 .LE. EMAX .AND. T .GE. MAX0(2, 6-
     1      BETA)) GOTO 3
            IOUT = I1MACH(2)
            WRITE (IOUT,  2)
   2        FORMAT (43H SNRM2 - THE ALGORITHM CANNOT BE GUARANTEED,
     1         17H ON THIS COMPUTER)
   3     CONTINUE
C/6S
   4  IF (N .GT. NMAX) CALL SETERR(20H SNRM2 - N TOO LARGE, 20, 3, 2)
C/7S
C  4  IF (N .GT. NMAX) CALL SETERR(' SNRM2 - N TOO LARGE', 20, 3, 2)
C/
      DSML = 0.0D0
      DMED = 0.0D0
      DBIG = 0.0D0
      DO  9 J = 1, N
         AX = ABS(X(1, J))
         DX = AX
         IF (AX .LE. B2) GOTO 5
            DBIG = DBIG+(DX/S2)**2
            GOTO  8
   5        IF (AX .LE. B1) GOTO 6
               DMED = DMED+DX**2
               GOTO  7
   6           DSML = DSML+(DX/S1)**2
   7     CONTINUE
   8     CONTINUE
   9     CONTINUE
      IF (DBIG .LE. 0.0D0) GOTO 11
         ABIG = SQRT(SNGL(DBIG))
         IF (ABIG .LE. OVERFL) GOTO 10
            SNRM2 = RBIG
C/6S
            CALL SETERR(17H SNRM2 - OVERFLOW, 17, 4, 1)
C/7S
C           CALL SETERR(' SNRM2 - OVERFLOW', 17, 4, 1)
C/
            RETURN
  10     ABIG = ABIG*S2
         AMED = SQRT(SNGL(DMED))
         GOTO  16
  11     IF (DSML .LE. 0.0D0) GOTO 14
            IF (DMED .LE. 0.0D0) GOTO 12
               ABIG = SQRT(SNGL(DMED))
               AMED = SQRT(SNGL(DSML))*S1
               GOTO  13
  12           SNRM2 = SQRT(SNGL(DSML))*S1
               RETURN
  13        CONTINUE
            GOTO  15
  14        SNRM2 = SQRT(SNGL(DMED))
            RETURN
  15  CONTINUE
  16  ASML = AMIN1(ABIG, AMED)
      ABIG = AMAX1(ABIG, AMED)
      IF (ASML .GT. ABIG*RELERR) GOTO 17
         SNRM2 = ABIG
         GOTO  18
  17     SNRM2 = ABIG*SQRT((ASML/ABIG)**2+1.0)
  18  RETURN
      END
